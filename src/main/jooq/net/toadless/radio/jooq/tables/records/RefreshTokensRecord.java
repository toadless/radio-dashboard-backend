/*
 * This file is generated by jOOQ.
 */
package net.toadless.radio.jooq.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import net.toadless.radio.jooq.tables.RefreshTokens;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RefreshTokensRecord extends UpdatableRecordImpl<RefreshTokensRecord> implements Record3<UUID, Long, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.refresh_tokens.token_id</code>.
     */
    public RefreshTokensRecord setTokenId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.refresh_tokens.token_id</code>.
     */
    public UUID getTokenId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.refresh_tokens.user_id</code>.
     */
    public RefreshTokensRecord setUserId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.refresh_tokens.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.refresh_tokens.expiry</code>.
     */
    public RefreshTokensRecord setExpiry(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.refresh_tokens.expiry</code>.
     */
    public LocalDateTime getExpiry() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, Long, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UUID, Long, LocalDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return RefreshTokens.REFRESH_TOKENS.TOKEN_ID;
    }

    @Override
    public Field<Long> field2() {
        return RefreshTokens.REFRESH_TOKENS.USER_ID;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return RefreshTokens.REFRESH_TOKENS.EXPIRY;
    }

    @Override
    public UUID component1() {
        return getTokenId();
    }

    @Override
    public Long component2() {
        return getUserId();
    }

    @Override
    public LocalDateTime component3() {
        return getExpiry();
    }

    @Override
    public UUID value1() {
        return getTokenId();
    }

    @Override
    public Long value2() {
        return getUserId();
    }

    @Override
    public LocalDateTime value3() {
        return getExpiry();
    }

    @Override
    public RefreshTokensRecord value1(UUID value) {
        setTokenId(value);
        return this;
    }

    @Override
    public RefreshTokensRecord value2(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public RefreshTokensRecord value3(LocalDateTime value) {
        setExpiry(value);
        return this;
    }

    @Override
    public RefreshTokensRecord values(UUID value1, Long value2, LocalDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RefreshTokensRecord
     */
    public RefreshTokensRecord() {
        super(RefreshTokens.REFRESH_TOKENS);
    }

    /**
     * Create a detached, initialised RefreshTokensRecord
     */
    public RefreshTokensRecord(UUID tokenId, Long userId, LocalDateTime expiry) {
        super(RefreshTokens.REFRESH_TOKENS);

        setTokenId(tokenId);
        setUserId(userId);
        setExpiry(expiry);
    }

    /**
     * Create a detached, initialised RefreshTokensRecord
     */
    public RefreshTokensRecord(net.toadless.radio.jooq.tables.pojos.RefreshTokens value) {
        super(RefreshTokens.REFRESH_TOKENS);

        if (value != null) {
            setTokenId(value.getTokenId());
            setUserId(value.getUserId());
            setExpiry(value.getExpiry());
        }
    }
}
