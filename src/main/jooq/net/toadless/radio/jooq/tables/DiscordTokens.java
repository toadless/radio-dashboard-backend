/*
 * This file is generated by jOOQ.
 */
package net.toadless.radio.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import net.toadless.radio.jooq.Keys;
import net.toadless.radio.jooq.Public;
import net.toadless.radio.jooq.tables.records.DiscordTokensRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DiscordTokens extends TableImpl<DiscordTokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.discord_tokens</code>
     */
    public static final DiscordTokens DISCORD_TOKENS = new DiscordTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DiscordTokensRecord> getRecordType() {
        return DiscordTokensRecord.class;
    }

    /**
     * The column <code>public.discord_tokens.user_id</code>.
     */
    public final TableField<DiscordTokensRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.discord_tokens.access_token</code>.
     */
    public final TableField<DiscordTokensRecord, String> ACCESS_TOKEN = createField(DSL.name("access_token"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.discord_tokens.refresh_token</code>.
     */
    public final TableField<DiscordTokensRecord, String> REFRESH_TOKEN = createField(DSL.name("refresh_token"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.discord_tokens.expiry</code>.
     */
    public final TableField<DiscordTokensRecord, LocalDateTime> EXPIRY = createField(DSL.name("expiry"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private DiscordTokens(Name alias, Table<DiscordTokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private DiscordTokens(Name alias, Table<DiscordTokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.discord_tokens</code> table reference
     */
    public DiscordTokens(String alias) {
        this(DSL.name(alias), DISCORD_TOKENS);
    }

    /**
     * Create an aliased <code>public.discord_tokens</code> table reference
     */
    public DiscordTokens(Name alias) {
        this(alias, DISCORD_TOKENS);
    }

    /**
     * Create a <code>public.discord_tokens</code> table reference
     */
    public DiscordTokens() {
        this(DSL.name("discord_tokens"), null);
    }

    public <O extends Record> DiscordTokens(Table<O> child, ForeignKey<O, DiscordTokensRecord> key) {
        super(child, key, DISCORD_TOKENS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DiscordTokensRecord> getPrimaryKey() {
        return Keys.DISCORD_TOKENS_PKEY;
    }

    @Override
    public List<ForeignKey<DiscordTokensRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DISCORD_TOKENS__DISCORD_TOKENS_USER_ID_FKEY);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.DISCORD_TOKENS__DISCORD_TOKENS_USER_ID_FKEY);

        return _users;
    }

    @Override
    public DiscordTokens as(String alias) {
        return new DiscordTokens(DSL.name(alias), this);
    }

    @Override
    public DiscordTokens as(Name alias) {
        return new DiscordTokens(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DiscordTokens rename(String name) {
        return new DiscordTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DiscordTokens rename(Name name) {
        return new DiscordTokens(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
